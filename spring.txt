Spring - фреймворк состоящий из больщого набора модулей нацеленный на разработку
крупных корпоративных приложений на Java. В основе фремворка Spring лежат модули
Java EE/Jakarta EE такие , как JPA, Servlet, Jta etc. В основном фреймворик спринг
активно применяется для разработки веб приложений работающих по протоколу HTTP.

HTTP - сетевой протокол транспортного уровня работающий по модели клиент-сервер.
Взаимодействия по протоколу HTTP всегда подразумевает формирование запроска  от клиента
к серверу и ответ отправляемый сервером клиенту на входящий запрос.


Клиент - сторона формирующая запрос на один из ресурсов сервера с целью получения ответа.
В качестве клиента может выступать различное программное обеспечение : браузер, мобильное приложение
декстопное приложение и тд ,либо другой сервер

Сервер - сторона принимающая входящий запрос, обрабатывающая его и отправлящая сформированный ответ обратно
клиенту. В качестве выступает приложение доступ к тому через отдельную программу называемую веб-сервером


Модель взаимодействия клиент-сервер:
Клиент -> Запрос -> Сервер -> Ответ -> Клиент.


Ресурс - отдельно взятый адрес на сервере запрашиваемый клиентомм в контексте выполнения запроса. В качестве
ответа на запрос клиентом ресурса , сервер должен дать ответ от той логики заложенный в ресурс.

Структура ответа сервера:

1) Статус - код по которому можно понять был ли выполнен запрос успешно либо с какими-то нюансами. Перечень
статусов (кодов) строго определен стандартом HTTP.
 * 2xx - статусы говорящие об успешном получении ответа именно от того ресурса который изначально и
 запрашивался.
 * 3xx - статусы говорящие об успешном получении ответа от того ресурса на который мы были перенаправлены
 в процессе выполнения запроса. Например запрашивали мы gmail.com а нас перенаправило на mail.google.com
 * 4xx - статусы говорящие об ошибке при выполнении запроса по вине запрашивающей стороны (клиента).
 * 5xx - статусы говорящие об ошибке при выполнеии запроса по вине сервере
2) Заголовки - область ответа где хранится мета-информация об ответе сервера (время отправки ответа, тип содеримого
, размер содержимого и так далее) Одним зи заголовков Content-Type значение которго отвечает за тип информаций
  отправляемой сервером клиенту. В зависимости от значения заголовка Content-Type браузер может по разному отоброжать
  ответ сервера. Важно чтобы значение заголовка Content-Type соответстввовало содержимиому отправляемому сервер клиенту
  Возможные значения заголовка Content-Type
  * 'text/plain' - обычнй текст без какого специализрованного формата
  * 'text/html' - текст формата HTML, в таком случае браузер будет отрисовывать страницу по html содержиимому.
  * 'application/json' - текст формата JSON
  * 'application/pdf' -  докумет формата PDF
  * 'image/jpeg' - изображение формата JPEG
  * 'image/png' - изображение формата PNG.

3) Тело -  информация отправляемая сервером клиенту.

  Один и тот же ресурс на сервере можно запрашивать разными HTTP методами определенными в стандарте.
  Базовыми методами запроса в протколе в HTTP являются GET и POST которые отличаются. Прежде чем перейти к различиям между
  меотами GET И POST распишем структуру запросо к серверу
 1) Метод и адрес запрашеваемого ресурса -  в данной секции запоса определяется метод HTTP метод  и адрес
    адрес на сервере к которому должен быть сфомирован запрос
 2) Заголовки - область ответа где хранится мета-информация об запросе ресурса
    (информация о клиенте, адрес откуда был сделан запрос, тип отправляемой на сервер информации и так далее).
 3) 3) Тело -  информация отправляемая клиентом серверу. Тело запроса дотупна только для запросов отправляемых методом
    POST , для метода запроса GET тело будет не доступно. Через тело запроса можно отправалять любую информацию в том числе
    и файлы при соответствующей структуре.

  GET - метод запроса при котором информация передается не в теле , а напрямую в адресе запрашиваемого ресурса что делает
  использование этого метода для передачи важной информации не безопасным.

  POST - метод запроса при которм информация предается в теле запроса (скрытая от глаз часть запроса). Помимо того что
  тело запроса скрыто от глаз, она еще и дополнительно шифруется при наличии TLS сертификата.

  Для пердачи информации при использовании GET метода необходимо в конце адреса запрашиваемого ресурса поставить
  вопростиельный знак '?' и начать передачау параметров в формате 'ключ=зачение', при передаче нескольких
  параметров, они должны отделятся амперсанд '&'.


  http://localhost:8080/something - запрос русурса '/something'  без передачи параметров.

  http://localhost:8080/something?name = Марк ' - запрос ресеруса ' /something ' /something с параметром 'name'
  и значением 'Марк''.

  Контроллер - компонет приложения ответственный за прием HTTP апросо и фотрмирование ответов.
  В модуле Spring Web существует несколько аннотаций для создания контроллеров.
  1) @Controller - в качестве результата работы ресурсов по умолчанию будт использованы HTML документы
     (в return потребуется указать путь к HTML файлу относительно папки templates). По умолчанию значения
     заголовка Content-Type будет text/html
  2) @RestController - в качестве результата работы ресурсов по умолчанию будет использоан JSON
     (значениек заголовка Content-Type будет application/json). Результат работы ресурсов  будет записываться
     напрямую в тело ответа (все что будет указано в return, напрямую будет попадать в тело отввета).


  @ResponseBody - аннотация применяемая к методам контроллера для записи результата напрямую в тело ответа. Все методы
  контроллера созданного при помощи аннотации @RestController по умолчанию помечены как @ResponseBody.

  Язык HTML является статичным и не позволяет сам по себе строить данамические страницы. Использя только HTML  и Spring Web
  не получиться подтянуть данные из базы данных и вывести их на HTML страницу . Для того чтобы формотировать
  динамические HTML страницы основываясь на данных полученных со стороны Java (Spring Web) необходима библиотека
  называемая шаблонизатором(в нашем случае это библиотека ThymeLeaf).

 ThymeLeaf это библиотека педоставляющая множество аттрибутов для вывода информации , написания условных конструкций ,
 циклов и так далее. При формировании итоговой HTML страницы все ThymeLeaf аттрибуты будут убраны.

 Для передачи информации из контроллера на HTML страницу необходимо использовать специальный обьект под названием Model.
 Обьект Model может содержать в  себе несколько аттрибутов, каждый аттрибут хранит отедльно взятую единицу информации.

 th:text - аттрибут предназначееный для подстановки информации из обьекта Model либо из текущего контекста в исходный
 HTML элемент.

 Model -> {
   message: Zzz
 }

 <h2 th:text="${message}"></h2>
 <h2>Zzz</h2>

 th:if - аттрибут предназначенный для условного отбражения исходного HTML элемента, если условия аттрибута даст true,
 элементы отрисуется на странице, если же резуальтатом будет false, то не будет.




















